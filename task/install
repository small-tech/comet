#!/usr/bin/env bash

######################################################################
#
# Intended usage for onboarding developers:
#
# 1. Clone this repository
# 2. Run task/install
# 3. Run task/run
#
# And you should see this project running successfully on your machine.
# (If you do not, please file an issue and let us know.)
#
# The install task:
#
# - Asks to install the elementary OS development libraries
#   if they don’t already exist on your machine.
#
# - Asks to install recommended VSCodium Vala development and debugging
#   extensions (Vala, Meson, CodeLLDB, XML, YAML) if you have VSCodium
#   installed and are missing any of them.
#
# - Installs all required dependencies for the project to compile.
#
# - Configures the Meson build.
#
# - Builds and installs the application using Ninja.
#
# - Updates your system’s icon cache so the application icon displays
#   properly in the Applications Menu and elsewhere.
#
######################################################################

set -eu -o pipefail

# Ask to install the elementary OS development libraries
# if they don’t already exist on your machine.

elementary_sdk_status=$(/usr/bin/dpkg-query --show --showformat='${db:Status-Status}\n' 'elementary-sdk' 2> /dev/null)
if [[ $elementary_sdk_status != 'installed' ]]; then
  install_elementary_sdk_question=$(zenity --question --text='<big>The elementary OS development libraries are not installed.</big>\n\n<b>Install them now?</b>' --title='Watson' --width=250 --icon-name=applications-development)
  install_extensions=$?
  if [[ $install_extensions == 0 ]]; then
    sudo apt install elementary-sdk
  fi
else
  echo '✓ elementary OS development libraries found.'
fi

# Ask to install recommended VSCodium Vala development and debugging
# extensions (Vala, Meson, CodeLLDB, XML, YAML) if you have VSCodium
# installed and are missing any of them.

which_vscodium=$(which codium)
vscodium_exists=$?
if [[ ${vscodium_exists} == 0 ]]; then
  # VSCodium is installed. Are all the extensions already installed? If so,
  # we don’t need to bother the person with this.
  already_installed_extensions_count=$(codium --list-extensions | grep -E "prince781.vala|asabil.meson|vadimcn.vscode-lldb|redhat.vscode-xml|redhat.vscode-yaml" | wc -l)
  if [[ ${already_installed_extensions_count} != 5 ]]; then
    # VSCodium is installed but one or more of the extensions that would
    # make the person’s life easier aren’t. Ask the person if they’d
    # like to have Watson install them.
    install_extensions_question=$(zenity --question --text='<big>Install VSCodium extensions?</big>\n\n<i>(This will install the Vala, Meson, CodeLLDB debugger, XML, and YAML extensions. With the extensions installed, press F5 in VSCodium to run/debug your app.)</i>' --title='Watson' --width=250 --icon-name=extension)
    install_extensions=$?
    if [[ $install_extensions == 0 ]]; then
      # Vala
      # https://github.com/Prince781/vala-vscode
      codium --install-extension prince781.vala

      # Meson
      # https://github.com/asabil/vscode-meson
      codium --install-extension asabil.meson

      # CodeLLDB: a native debugger extension based on LLDB.
      # https://github.com/vadimcn/vscode-lldb
      codium --install-extension vadimcn.vscode-lldb

      # EditorConfig support
      # https://github.com/editorconfig/editorconfig-vscode
      codium --install-extension editorconfig.editorconfig

      # XML
      # https://github.com/redhat-developer/vscode-xml
      codium --install-extension redhat.vscode-xml

      # YAML
      # https://github.com/redhat-developer/vscode-yaml
      codium --install-extension redhat.vscode-yaml
    fi
  else
    echo '✓ VSCodium and all recommended extensions already installed.'
  fi
else
  echo 'ℹ️ VSCodium not installed; skipping recommended extensions check.'
fi

# Install dependencies.

# If your app has any third-party dependencies that are not included in
# the elementary OS Software Development Kit (SDK) metapackage, add installation
# commands for them here.
#
# For a list of the packages that are included in the elementary OS SDK, see
# https://github.com/elementary/metapackages/blob/master/elementary-sdk-amd64
# https://github.com/elementary/metapackages/blob/master/elementary-sdk-arm64
# https://github.com/elementary/metapackages/blob/master/elementary-sdk-armhf

sudo apt install libgspell-1-dev

# Configure build.
meson build --prefix=/usr

# Create translations.

# (This only needs to be done on initial project generation, otherwise it
# results in a dirty Git repository due to timestamps if run after a clone.
# The default is not to create/update translations on install.)
if [[ ${1-'do-not-create-translations'} == '--create-translations' ]]; then
  task/update-translations --no-status
  echo '✓ Created translations.'
fi

# Run build and install assets.
pushd build
ninja
ninja install
popd

# Clear icon caches.
sudo update-icon-caches /usr/share/icons/*

echo 'Comet is installed.'
echo ''
echo 'You can run it from the Applications Menu or using the task/run script.'
